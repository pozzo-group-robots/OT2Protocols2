•	Storing metadata for property values from chemicals (i.e, what temperature the
density value was reported at, what solvent is used for solubility value). •
Addressing instances when certain properties aren’t found from the ideal source
(i.e. density not in pubchem) and needs to be taken from other sources. 

2020/04/09 KJL, JR Wrote function "get_stock_dfs" to import
stock_specification.csv. The idea is that the stock_specification contains some
nominal values for what stocks will be used in the experiment including: name of
stock (in place of enumerating stock we can use a string), maximum concentration
of each component in the stock, chemical shorthand name, role in experiment.  

get_stock_dfs outputs a dictionary with {stock-name:dataframe...}. Started
making another csv which will be used to specify how to perform the experiment,
i.e. order of addition of stocks, and what concentrations to try. One can
specify a sampling method (explicity, random in range... etc.) 

To do: write a function that parses second csv, and interacts with the first
csv. The purpose here is to check whether the maximum concentration of stocks
will satisfy the experimental rang. If so, the function will make a "suggested
concentration" column in the stock_specification.csv, but the user will be able
to update the csv with actual experimental values. 

THEN this will be read back in, checked whether it can still make all samples,
and calculate pipetting volumes.

NOTE: Instead of updating the stock_specification.csv we can create a new one.  

2020/04/26 KJL Need to organize code-collab into more sensible folders. Treat
this as a space for making python modules. Should take up hannah's idea for
creating a shared repository of pozzo lab labware definitions. Realized that
allowing components to be in more than one stock could create very hairy
situations. Because if you have to fulfill the concentration for two components
using one stock, you are restricting the concentrations you can create to
something that's not easily expressed. e.g. if you have a stock which has to
fulfill the concentration of both A and B, then the ratio of the concentration
of A and B in that stock has to remain the same. 

Therefore, if we want to avoid using the exhaustive volume method, then we
should indeed stick to one primary component per stock. What I mean by primary
is that only one component's concentration quota has to be fulfilled using the
stock, and the remaining component quota is simply tallied. This is what is done
in principle whenever we calculate how much additional water to add at the end.

2020/04/27 Group meeting notes: Maria - did not find example of database using
google drive and python. Sage - please push code. Edwin - used module called
fuzzywuzzy to parse raw data from DLS and save in an HDF5 file. Kacper - should
try refactoring code to incorporate mixture constraint, correctly calculate
volume fractions, and don't over-specify. Anyone - look into how to make our
github organization take advantage of additional permissions granted to
educational organizations like ourselves.  

2020/05/04 KJL - generate_candidate_samples() may need to be renamed, or needs
to be refactored so that it can work for either lattice or randomly generated
samples.

2020/05/11 KJL - Need to provide Hannah with an example experiment to perform.
Do not overspecify so that Hannah can somehow optimize the process. Three
files: 
1. stock list first guess by user. Initial guess, e.g. most concentrated
stock that you would prepare. 
2. samples which satisfy mixture constraint 
3. available labware (pipette types, etc.)

2020/05/14
KJL
1. Point out to hannah that in some cases stocks could consist of more than one
component, and users would want to specify order. But it's very reasonable to
just assume stocks are simple (one component and one solvent or pure solvent).
2. Essentially have this. Makes sense to convert this to a table format e.g.
.csv. b/c it's representative of sample. 
3. text, csv, or json file.

SCW
Three files:
- Stock information
	- txt doc?
	- Dodecanoic acid = {'ethanol': 5, 'water': 2, ... 'sovent' : max solubility}
	- Oleic acid =
	- 1 file - all solubility for all chemicals
	- 1.3M solution dda
	- manual maximum - researchers choice
	- Experimental data
	-
- Instrument(Labware) Information
	- txt doc?
	- 20_ml_vial, trench stock, - 10? different labware types
	- 'abgene-deep-96-well' = {plate_name, grid=(12, 8), spacing=(9, 9),diameter=9, depth=36, volume=2000}
- Samples that statisfy the mixture constraint
	- CSV - volf, M, mass, vol of each sample itself
	- check which ones are possible &
- pulling a df from a google sheet - or csv 4
